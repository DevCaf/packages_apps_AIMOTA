<?xml version="1.0" ?>

<!--
Copyright (c) 2002-2003 The Trustees of Indiana University.
                        All rights reserved.
Copyright (c) 2000-2001 University of Notre Dame. All rights reserved.

   Distributed under the Boost Software License, Version 1.0.
   (See accompanying file LICENSE_1_0.txt or copy at
   http://www.boost.org/LICENSE_1_0.txt) -->

<operator-list>
    <!-- This list is from Pohl's book, and needs to be checked for accuracy -->

    <op name="postincrement">
        <apply priority="100"><arg num="1" />++
        </apply> <!-- No assoc - always use parentheses -->
        <impl position="method">operator++(int)</impl>
    </op>

    <op name="postdecrement">
        <apply priority="100"><arg num="1" />--
        </apply>
        <impl position="method">operator--(int)</impl>
    </op>

    <op name="apply-function">
        <apply priority="100"><name />(<arg-list priority="30" start="1" />)
        </apply>
        <impl position="freestanding"><name />(<arg-list />)
        </impl>
    </op>

    <op name="apply-method">
        <apply assoc="1" priority="100"><arg num="1" />.<name />(<arg-list priority="30"
            start="2" />)
        </apply>
        <impl position="method"><name />(<arg-list />)
        </impl>
    </op>

    <op name="pointer-apply-method">
        <apply assoc="1" priority="100"><arg num="1" />-&gt;<name />(<arg-list priority="30"
            start="2" />)
        </apply>
        <impl>Error</impl>
    </op>

    <op name="apply-funcobj">
        <apply assoc="1" priority="100"><arg num="1" />(<arg-list priority="30" start="2" />)
        </apply>
        <impl position="method">operator()(<arg-list />)
        </impl>
    </op>

    <op name="construct">
        <apply priority="100"><arg num="1" />(<arg-list priority="30" start="2" />)
        </apply>
        <impl position="method"><self />(<arg-list />)
        </impl>
    </op>

    <op name="subscript">
        <apply assoc="1" priority="100"><arg num="1" />[<arg num="2" priority="0" />]
        </apply>
        <impl position="method">operator[](<arg-list />)
        </impl>
    </op>

    <op name="class-member">
        <apply assoc="1" priority="100"><arg num="1" />.
            <name />
        </apply>
        <impl>Error</impl>
    </op>

    <op name="pointer-member">
        <!-- Note: non-testable constraint -->
        <apply priority="100"><arg assoc="1" num="1" />-&gt;{member-name} (return type is
            pointer-to-object type)
        </apply>
        <impl>operator-&gt;(<arg-list />)
        </impl>
    </op>

    <op name="preincrement">
        <apply priority="95">++
            <arg num="1" />
        </apply>
        <impl position="method">operator++(<arg-list />)
        </impl>
    </op>

    <op name="predecrement">
        <apply priority="95">--
            <arg num="1" />
        </apply>
        <impl position="method">operator--(<arg-list />)
        </impl>
    </op>

    <op name="logical-not">
        <apply assoc="1" priority="95">!
            <arg num="1" />
        </apply>
        <impl position="method">operator!(<arg-list />)
        </impl>
    </op>

    <op name="bitwise-not">
        <apply assoc="1" priority="95">~
            <arg num="1" />
        </apply>
        <impl position="method">operator~(<arg-list />)
        </impl>
    </op>

    <op name="address-of">
        <apply priority="95">&amp;<arg num="1" />
        </apply>
        <impl position="method">operator&amp;(<arg-list />)
        </impl>
    </op>

    <op name="dereference">
        <apply assoc="1" priority="95">*
            <arg num="1" />
        </apply>
        <impl position="method">operator*(<arg-list />)
        </impl>
    </op>

    <op name="unary-plus">
        <apply priority="95">+
            <arg num="1" />
        </apply>
        <impl position="method">operator+(<arg-list />)
        </impl>
    </op>

    <op name="unary-minus">
        <apply priority="95">-
            <arg num="1" />
        </apply>
        <impl position="method">operator-(<arg-list />)
        </impl>
    </op>

    <op name="class-member-ptr">
        <apply assoc="1" priority="90"><arg num="1" />.*
            <arg num="2" />
        </apply>
        <impl>Error</impl>
    </op>

    <op name="pointer-member-ptr">
        <apply assoc="1" priority="90"><arg num="1" />-&gt;*
            <arg num="2" />
        </apply>
        <impl position="method">operator-&gt;*(<arg-list />)
        </impl>
    </op>

    <op name="multiply">
        <apply assoc="1" priority="90">
            <arg num="1" />
            *
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator * (<arg-list />)
        </impl>
    </op>

    <op name="divide">
        <apply assoc="1" priority="90">
            <arg num="1" />
            /
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator / (<arg-list />)
        </impl>
    </op>

    <op name="modulus">
        <apply assoc="1" priority="90">
            <arg num="1" />
            %
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator % (<arg-list />)
        </impl>
    </op>

    <op name="add">
        <apply assoc="1" priority="85">
            <arg num="1" />
            +
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator + (<arg-list />)
        </impl>
    </op>

    <op name="subtract">
        <apply assoc="1" priority="85">
            <arg num="1" />
            -
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator - (<arg-list />)
        </impl>
    </op>

    <op name="shift-left">
        <apply assoc="1" priority="80">
            <arg num="1" /> &lt;&lt;
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator &lt;&lt; (<arg-list />)
        </impl>
    </op>

    <op name="shift-right">
        <apply assoc="1" priority="80">
            <arg num="1" /> &gt;&gt;
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator &gt;&gt; (<arg-list />)
        </impl>
    </op>

    <op name="less-than">
        <apply priority="75">
            <arg num="1" /> &lt;
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator &lt; (<arg-list />)
        </impl>
    </op>

    <op name="greater-than">
        <apply priority="75">
            <arg num="1" /> &gt;
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator &gt; (<arg-list />)
        </impl>
    </op>

    <op name="less-than-or-equal">
        <apply priority="75">
            <arg num="1" /> &lt;=
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator &lt;= (<arg-list />)
        </impl>
    </op>

    <op name="greater-than-or-equal">
        <apply priority="75">
            <arg num="1" /> &gt;=
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator &gt;= (<arg-list />)
        </impl>
    </op>

    <op name="equal-to">
        <apply priority="70">
            <arg num="1" />
            ==
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator == (<arg-list />)
        </impl>
    </op>

    <op name="not-equal-to">
        <apply priority="70">
            <arg num="1" />
            !=
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator != (<arg-list />)
        </impl>
    </op>

    <op name="bitwise-and">
        <apply assoc="1" priority="65">
            <arg num="1" /> &amp;
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator &amp; (<arg-list />)
        </impl>
    </op>

    <op name="bitwise-or">
        <apply assoc="1" priority="60">
            <arg num="1" />
            |
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator | (<arg-list />)
        </impl>
    </op>

    <op name="bitwise-xor">
        <apply assoc="1" priority="55">
            <arg num="1" />
            ^
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator ^ (<arg-list />)
        </impl>
    </op>

    <op name="logical-and">
        <apply assoc="1" priority="50">
            <arg num="1" /> &amp;&amp;
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator &amp;&amp; (<arg-list />)
        </impl>
    </op>

    <op name="logical-or">
        <apply assoc="1" priority="45">
            <arg num="1" />
            ||
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator || (<arg-list />)
        </impl>
    </op>

    <op name="conditional">
        <apply assoc="3" priority="40">
            <arg num="1" />
            ?
            <arg num="2" />
            :
            <arg num="3" />
        </apply>
        <impl>Error</impl>
    </op>

    <op name="assign">
        <apply assoc="2" priority="35">
            <arg num="1" />
            =
            <arg num="2" />
        </apply>
        <impl position="method">operator = (<arg-list />)
        </impl>
    </op>

    <op name="add-assign">
        <apply assoc="2" priority="35">
            <arg num="1" />
            +=
            <arg num="2" />
        </apply>
        <impl position="method">operator += (<arg-list />)
        </impl>
    </op>

    <op name="subtract-assign">
        <apply assoc="2" priority="35">
            <arg num="1" />
            -=
            <arg num="2" />
        </apply>
        <impl position="method">operator -= (<arg-list />)
        </impl>
    </op>

    <op name="multiply-assign">
        <apply assoc="2" priority="35">
            <arg num="1" />
            *=
            <arg num="2" />
        </apply>
        <impl position="method">operator *= (<arg-list />)
        </impl>
    </op>

    <op name="divide-assign">
        <apply assoc="2" priority="35">
            <arg num="1" />
            /=
            <arg num="2" />
        </apply>
        <impl position="method">operator /= (<arg-list />)
        </impl>
    </op>

    <op name="modulus-assign">
        <apply assoc="2" priority="35">
            <arg num="1" />
            %=
            <arg num="2" />
        </apply>
        <impl position="method">operator %= (<arg-list />)
        </impl>
    </op>

    <op name="shift-left-assign">
        <apply assoc="2" priority="35">
            <arg num="1" /> &lt;&lt;=
            <arg num="2" />
        </apply>
        <impl position="method">operator &lt;&lt;= (<arg-list />)
        </impl>
    </op>

    <op name="shift-right-assign">
        <apply assoc="2" priority="35">
            <arg num="1" /> &gt;&gt;=
            <arg num="2" />
        </apply>
        <impl position="method">operator &gt;&gt;= (<arg-list />)
        </impl>
    </op>

    <op name="bitwise-and-assign">
        <apply assoc="2" priority="35">
            <arg num="1" /> &amp;=
            <arg num="2" />
        </apply>
        <impl position="method">operator &amp;= (<arg-list />)
        </impl>
    </op>

    <op name="bitwise-or-assign">
        <apply assoc="2" priority="35">
            <arg num="1" />
            |=
            <arg num="2" />
        </apply>
        <impl position="method">operator |= (<arg-list />)
        </impl>
    </op>

    <op name="bitwise-xor-assign">
        <apply assoc="2" priority="35">
            <arg num="1" />
            ^=
            <arg num="2" />
        </apply>
        <impl position="method">operator ^= (<arg-list />)
        </impl>
    </op>

    <op name="comma">
        <apply priority="20"><arg num="1" />,
            <arg num="2" />
        </apply>
        <impl position="freestanding">operator , (<arg-list />)
        </impl>
    </op>

    <op name="function-pointer">
        <apply>
            <arg num="1" />
            (*)(<arg-list priority="30" start="2" />)
        </apply>
        <impl>Error</impl>
    </op>

    <op name="functorize-operator">
        <!-- Note: non-testable constraint -->
        <apply>functorization of operator
            <name />
            on arguments {<arg-list start="1" />}
        </apply>
        <impl>Error</impl>
    </op>

    <op name="functorize-function">
        <!-- Note: non-testable constraint -->
        <apply>functorization of function
            <name />
            on arguments {<arg-list start="1" />}
        </apply>
        <impl>Error</impl>
    </op>

</operator-list>
